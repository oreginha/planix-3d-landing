// Test con m√∫ltiples escenarios del formulario
const fetch = require('node-fetch');

console.log('üß™ PRUEBAS EXHAUSTIVAS DEL FORMULARIO');
console.log('=====================================');

// Funci√≥n helper para hacer requests
async function testFormulario(testName, data, expectedStatus = 200) {
  console.log(`\nüìã ${testName}`);
  console.log('Datos:', JSON.stringify(data, null, 2));
  
  try {
    const response = await fetch('http://localhost:3001/api/contact', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    });
    
    const result = await response.json();
    
    console.log(`Status: ${response.status} (esperado: ${expectedStatus})`);
    console.log('Respuesta:', JSON.stringify(result, null, 2));
    
    if (response.status === expectedStatus) {
      console.log('‚úÖ RESULTADO: CORRECTO');
    } else {
      console.log('‚ùå RESULTADO: STATUS INESPERADO');
    }
    
    return { success: response.status === expectedStatus, response, result };
    
  } catch (error) {
    console.log('‚ùå ERROR EN REQUEST:', error.message);
    return { success: false, error: error.message };
  }
}

// Ejecutar pruebas
async function ejecutarPruebas() {
  const resultados = [];
  
  // TEST 1: Datos v√°lidos completos
  resultados.push(await testFormulario(
    'TEST 1: Datos v√°lidos completos',
    {
      name: 'Juan P√©rez',
      email: 'juan@test.com',
      company: 'Mi Empresa Test',
      message: 'Este es un mensaje de prueba con suficiente longitud para pasar la validaci√≥n del backend. Incluye informaci√≥n sobre un proyecto ficticio.'
    },
    200
  ));
  
  // TEST 2: Datos v√°lidos m√≠nimos (sin empresa)
  resultados.push(await testFormulario(
    'TEST 2: Datos v√°lidos m√≠nimos',
    {
      name: 'Ana Garc√≠a',
      email: 'ana@ejemplo.com',
      message: 'Mensaje m√≠nimo pero v√°lido para las validaciones del formulario.'
    },
    200
  ));
  
  // TEST 3: Email inv√°lido
  resultados.push(await testFormulario(
    'TEST 3: Email inv√°lido',
    {
      name: 'Carlos L√≥pez',
      email: 'email-invalido',
      message: 'Mensaje de prueba con email inv√°lido.'
    },
    400
  ));
  
  // TEST 4: Nombre muy corto
  resultados.push(await testFormulario(
    'TEST 4: Nombre muy corto',
    {
      name: 'A',
      email: 'test@email.com',
      message: 'Mensaje de prueba con nombre demasiado corto.'
    },
    400
  ));
  
  // TEST 5: Mensaje muy corto
  resultados.push(await testFormulario(
    'TEST 5: Mensaje muy corto',
    {
      name: 'Pedro Mart√≠nez',
      email: 'pedro@test.com',
      message: 'Corto'
    },
    400
  ));
  
  // TEST 6: Campos faltantes
  resultados.push(await testFormulario(
    'TEST 6: Campos faltantes',
    {
      name: 'Mar√≠a Gonz√°lez'
      // email y message faltantes
    },
    400
  ));
  
  // RESUMEN
  console.log('\n' + '='.repeat(50));
  console.log('üìä RESUMEN DE PRUEBAS');
  console.log('='.repeat(50));
  
  let exitosos = 0;
  let fallidos = 0;
  
  resultados.forEach((resultado, index) => {
    const testNum = index + 1;
    if (resultado.success) {
      console.log(`‚úÖ TEST ${testNum}: PASADO`);
      exitosos++;
    } else {
      console.log(`‚ùå TEST ${testNum}: FALLIDO`);
      fallidos++;
    }
  });
  
  console.log(`\nüìà ESTAD√çSTICAS:`);
  console.log(`   Exitosos: ${exitosos}/${resultados.length}`);
  console.log(`   Fallidos: ${fallidos}/${resultados.length}`);
  console.log(`   Tasa de √©xito: ${Math.round((exitosos/resultados.length)*100)}%`);
  
  if (fallidos === 0) {
    console.log('\nüéâ ¬°TODAS LAS PRUEBAS PASARON! El formulario funciona correctamente.');
  } else {
    console.log(`\n‚ö†Ô∏è  ${fallidos} pruebas fallaron. Revisar implementaci√≥n.`);
  }
}

// Ejecutar
ejecutarPruebas().catch(console.error);
